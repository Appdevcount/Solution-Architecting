trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  publishDir: '$(Build.ArtifactStagingDirectory)/publish'
  dotnetVersion: "9.0.1"


stages:
  - stage: Build
    jobs:
      - job: Build
        displayName: Build and Push API to container registry
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '6.x.x' 
          - task: DotNetCoreCLI@2
            displayName: dotnet restore
            inputs:
              command: "restore"
              projects: ${{ parameters.solutionPath }}
              feedsToUse: "config"
              nugetConfigPath: ${{ parameters.nugetConfigPath }}
          - task: DotNetCoreCLI@2
            displayName: 'dotnet build'
            inputs:
              command: 'build'
              projects: '**/*.csproj'
              arguments: '--configuration $(buildConfiguration)'     
          - task: DotNetCoreCLI@2
            displayName: 'dotnet publish'
            inputs:
              command: 'publish'
              projects: '**/*.csproj'
              arguments: '--configuration $(buildConfiguration) --output $(publishDir)'     
          - publish: $(publishDir)
            artifact: drop             
          - task: DotNetCoreCLI@2
            displayName: dotnet test
            inputs:
              command: "test"
              arguments: '${{ parameters.testPath }} --no-restore --collect "XPlat Code coverage"'
              publishTestResults: true
              testRunTitle: UnitTests
          - task: PublishCodeCoverageResults@1
            displayName: "Publish code coverage results"
            inputs:
              codeCoverageTool: "Cobertura"
              summaryFileLocation: "$(Agent.TempDirectory)/**/*coverage.cobertura.xml"



  - stage: Deploy_DEV
    displayName: "DV1"
    condition: and(succeeded(), eq(variables['DeployToDEV'], 'true'))
    jobs:
     

      - deployment: Deploy
        environment: 'DEV'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: dr
                - task: PowerShell@2
                  displayName: 'Copy files to IIS server'
                  inputs:
                    targetType: 'inline'
                    script:
                       $sourcePath= "$(pipeline.Workspace)/drop"
                       $destinationPath = "\\\\<IIS_SERVER_IP>\\inetpub\\wwwroot"
                       $username = "<IIS_SERVER_USERNAME>"
                       $password = "<IIS_SERVER_PASSWORD>"
                       $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
                       $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)

                       echo "copy files to IIS server"
                       Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force -Credential $credential
                - task: PowerShell@2
                  displayName: 'Restart ISS'
                  inputs:
                    targetType: 'inline'
                    script: |
                      Invoke-Command -ComputerName <IIS_SERVER_IP> -ScriptBlock {
                        iisreset
                      }


  - stage: Deploy_INTG2
    displayName: "INTG2"
    condition: and(succeeded(), eq(variables['DeployToINTG2'], 'true'))
    jobs:
      - deployment: Deploy
        environment: 'INTG2'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop

                - task: PowerShell@2
                  displayName: 'Copy files to IIS server'
                  inputs:
                    targetType: 'inline'
                    script:
                       $sourcePath= "$(pipeline.Workspace)/drop"
                       $destinationPath = "\\\\<IIS_SERVER_IP>\\inetpub\\wwwroot"
                       $username = "<IIS_SERVER_USERNAME>"
                       $password = "<IIS_SERVER_PASSWORD>"
                       $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
                       $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)

                       echo "copy files to IIS server"
                       Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force -Credential $credential
                - task: PowerShell@2
                  displayName: 'Restart ISS'
                  inputs:
                    targetType: 'inline'
                    script: |
                      Invoke-Command -ComputerName <IIS_SERVER_IP> -ScriptBlock {
                        iisreset
                      }
                   

  - stage: Deploy_INTG
    displayName: "INTG"
    condition: and(succeeded(), eq(variables['DeployToINTG'], 'true'))
    jobs:
      - deployment: Deploy
        environment: 'INTG'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop

                - task: PowerShell@2
                  displayName: 'Copy files to IIS server'
                  inputs:
                    targetType: 'inline'
                    script:
                       $sourcePath= "$(pipeline.Workspace)/drop"
                       $destinationPath = "\\\\<IIS_SERVER_IP>\\inetpub\\wwwroot"
                       $username = "<IIS_SERVER_USERNAME>"
                       $password = "<IIS_SERVER_PASSWORD>"
                       $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
                       $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)

                       echo "copy files to IIS server"
                       Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force -Credential $credential
                - task: PowerShell@2
                  displayName: 'Restart ISS'
                  inputs:
                    targetType: 'inline'
                    script: |
                      Invoke-Command -ComputerName <IIS_SERVER_IP> -ScriptBlock {
                        iisreset
                      }
                   

  - stage: Deploy_UAT
    displayName: "UAT"
    condition: and(succeeded(), eq(variables['DeployToUAT'], 'true'))
    jobs:
      - deployment: Deploy
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop

                - task: PowerShell@2
                  displayName: 'Copy files to IIS server'
                  inputs:
                    targetType: 'inline'
                    script:
                       $sourcePath= "$(pipeline.Workspace)/drop"
                       $destinationPath = "\\\\<IIS_SERVER_IP>\\inetpub\\wwwroot"
                       $username = "<IIS_SERVER_USERNAME>"
                       $password = "<IIS_SERVER_PASSWORD>"
                       $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
                       $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)

                       echo "copy files to IIS server"
                       Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force -Credential $credential
                - task: PowerShell@2
                  displayName: 'Restart ISS'
                  inputs:
                    targetType: 'inline'
                    script: |
                      Invoke-Command -ComputerName <IIS_SERVER_IP> -ScriptBlock {
                        iisreset
                      }
                   

  - stage: Deploy_PROD
    displayName: "PROD"
    condition: and(succeeded(), eq(variables['DeployToPROD'], 'true'))
    jobs:
      - deployment: Deploy
        environment: 'PROD'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop


                - task: PowerShell@2
                  displayName: 'Copy files to IIS server'
                  inputs:
                    targetType: 'inline'
                    script:
                       $sourcePath= "$(pipeline.Workspace)/drop"
                       $destinationPath = "\\\\<IIS_SERVER_IP>\\inetpub\\wwwroot"
                       $username = "<IIS_SERVER_USERNAME>"
                       $password = "<IIS_SERVER_PASSWORD>"
                       $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
                       $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)

                       echo "copy files to IIS server"
                       Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force -Credential $credential
                - task: PowerShell@2
                  displayName: 'Restart ISS'
                  inputs:
                    targetType: 'inline'
                    script: |
                      Invoke-Command -ComputerName <IIS_SERVER_IP> -ScriptBlock {
                        iisreset
                      }
                   
